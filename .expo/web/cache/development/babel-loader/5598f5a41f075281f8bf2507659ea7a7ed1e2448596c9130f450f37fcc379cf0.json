{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar WebViewComponent = function WebViewComponent(_ref) {\n  var url = _ref.url;\n  var iframeRef = useRef(null);\n  if (Platform.OS === 'web') {\n    useEffect(function () {\n      var hideHeader = function hideHeader() {\n        if (iframeRef.current && iframeRef.current.contentWindow) {\n          try {\n            iframeRef.current.contentWindow.postMessage({\n              action: 'hideHeader'\n            }, '*');\n          } catch (error) {\n            console.error('无法注入JavaScript代码:', error);\n          }\n        }\n      };\n      var iframe = iframeRef.current;\n      if (iframe) {\n        iframe.onload = hideHeader;\n      }\n      var timer = setTimeout(hideHeader, 1000);\n      return function () {\n        clearTimeout(timer);\n        if (iframe) {\n          iframe.onload = null;\n        }\n      };\n    }, [url]);\n    return _jsx(View, {\n      style: styles.webview,\n      children: _jsx(\"iframe\", {\n        ref: iframeRef,\n        src: url,\n        style: {\n          width: '100%',\n          height: '100%',\n          border: 'none'\n        },\n        title: \"Web Content\",\n        sandbox: \"allow-scripts allow-same-origin allow-top-navigation-by-user-activation\",\n        dangerouslySetInnerHTML: {\n          __html: `\n              <script>\n                // 监听来自父窗口的消息\n                window.addEventListener('message', function(event) {\n                  if (event.data && event.data.action === 'hideHeader') {\n                    // 尝试隐藏顶栏\n                    try {\n                      // 常见的顶栏元素选择器\n                      const headerSelectors = [\n                        'header', \n                        '.header', \n                        '#header',\n                        '.navbar',\n                        '#navbar',\n                        '.top-bar',\n                        '#top-bar',\n                        '.site-header',\n                        '#site-header'\n                      ];\n\n                      // 尝试隐藏所有可能的顶栏元素\n                      headerSelectors.forEach(selector => {\n                        const elements = document.querySelectorAll(selector);\n                        elements.forEach(element => {\n                          element.style.display = 'none';\n                          // 也设置可见性，以防有些元素使用visibility属性\n                          element.style.visibility = 'hidden';\n                        });\n                      });\n\n                      // 特别针对酥米的小站的顶栏进行隐藏\n                      const customHeader = document.querySelector('.site-nav');\n                      if (customHeader) {\n                        customHeader.style.display = 'none';\n                        customHeader.style.visibility = 'hidden';\n                      }\n\n                      // 调整内容区域的边距，以防隐藏顶栏后内容位置不对\n                      const mainContent = document.querySelector('main, .main, #main, .content, #content');\n                      if (mainContent) {\n                        mainContent.style.marginTop = '0';\n                      }\n                    } catch (error) {\n                      console.error('隐藏顶栏失败:', error);\n                    }\n                  }\n                });\n              </script>\n            `\n        }\n      })\n    });\n  }\n  try {\n    var _require = require('react-native-webview'),\n      WebView = _require.WebView;\n    var injectedJavaScript = `\n      (function() {\n        // 常见的顶栏元素选择器\n        const headerSelectors = [\n          'header', \n          '.header', \n          '#header',\n          '.navbar',\n          '#navbar',\n          '.top-bar',\n          '#top-bar',\n          '.site-header',\n          '#site-header',\n          '.site-nav'\n        ];\n\n        // 尝试隐藏所有可能的顶栏元素\n        headerSelectors.forEach(selector => {\n          const elements = document.querySelectorAll(selector);\n          elements.forEach(element => {\n            element.style.display = 'none';\n            element.style.visibility = 'hidden';\n          });\n        });\n\n        // 调整内容区域的边距\n        const mainContent = document.querySelector('main, .main, #main, .content, #content');\n        if (mainContent) {\n          mainContent.style.marginTop = '0';\n        }\n\n        return true;\n      })();\n    `;\n    return _jsx(WebView, {\n      source: {\n        uri: url\n      },\n      style: styles.webview,\n      javaScriptEnabled: true,\n      domStorageEnabled: true,\n      startInLoadingState: true,\n      scalesPageToFit: true,\n      injectedJavaScript: injectedJavaScript,\n      injectedJavaScriptBeforeContentLoaded: injectedJavaScript\n    });\n  } catch (error) {\n    return _jsx(View, {\n      style: styles.errorContainer,\n      children: _jsx(Text, {\n        style: styles.errorText,\n        children: \"\\u65E0\\u6CD5\\u52A0\\u8F7DWebView\\u7EC4\\u4EF6\"\n      })\n    });\n  }\n};\nvar styles = StyleSheet.create({\n  webview: {\n    flex: 1\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#666'\n  }\n});\nexport default WebViewComponent;","map":{"version":3,"names":["React","useRef","useEffect","StyleSheet","Platform","View","Text","jsx","_jsx","WebViewComponent","_ref","url","iframeRef","OS","hideHeader","current","contentWindow","postMessage","action","error","console","iframe","onload","timer","setTimeout","clearTimeout","style","styles","webview","children","ref","src","width","height","border","title","sandbox","dangerouslySetInnerHTML","__html","_require","require","WebView","injectedJavaScript","source","uri","javaScriptEnabled","domStorageEnabled","startInLoadingState","scalesPageToFit","injectedJavaScriptBeforeContentLoaded","errorContainer","errorText","create","flex","justifyContent","alignItems","backgroundColor","fontSize","color"],"sources":["D:/sumiblogapph5/src/components/WebViewComponent.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { StyleSheet, Platform, View, Text } from 'react-native';\n\nconst WebViewComponent = ({ url }) => {\n  const iframeRef = useRef(null);\n\n  // 在Web平台上使用iframe作为React Native WebView的替代\n  if (Platform.OS === 'web') {\n    useEffect(() => {\n      // 当iframe加载完成后，注入JavaScript来隐藏顶栏\n      const hideHeader = () => {\n        if (iframeRef.current && iframeRef.current.contentWindow) {\n          try {\n            // 注入JavaScript代码来隐藏顶栏\n            iframeRef.current.contentWindow.postMessage({\n              action: 'hideHeader'\n            }, '*');\n          } catch (error) {\n            console.error('无法注入JavaScript代码:', error);\n          }\n        }\n      };\n\n      // 添加加载完成事件监听器\n      const iframe = iframeRef.current;\n      if (iframe) {\n        iframe.onload = hideHeader;\n      }\n\n      // 设置定时器，以防onload事件不触发\n      const timer = setTimeout(hideHeader, 1000);\n\n      // 清理函数\n      return () => {\n        clearTimeout(timer);\n        if (iframe) {\n          iframe.onload = null;\n        }\n      };\n    }, [url]);\n\n    return (\n      <View style={styles.webview}>\n        <iframe \n          ref={iframeRef}\n          src={url} \n          style={{ width: '100%', height: '100%', border: 'none' }}\n          title=\"Web Content\"\n          sandbox=\"allow-scripts allow-same-origin allow-top-navigation-by-user-activation\"\n          // 添加内联JavaScript来监听消息并隐藏顶栏\n          dangerouslySetInnerHTML={{\n            __html: `\n              <script>\n                // 监听来自父窗口的消息\n                window.addEventListener('message', function(event) {\n                  if (event.data && event.data.action === 'hideHeader') {\n                    // 尝试隐藏顶栏\n                    try {\n                      // 常见的顶栏元素选择器\n                      const headerSelectors = [\n                        'header', \n                        '.header', \n                        '#header',\n                        '.navbar',\n                        '#navbar',\n                        '.top-bar',\n                        '#top-bar',\n                        '.site-header',\n                        '#site-header'\n                      ];\n\n                      // 尝试隐藏所有可能的顶栏元素\n                      headerSelectors.forEach(selector => {\n                        const elements = document.querySelectorAll(selector);\n                        elements.forEach(element => {\n                          element.style.display = 'none';\n                          // 也设置可见性，以防有些元素使用visibility属性\n                          element.style.visibility = 'hidden';\n                        });\n                      });\n\n                      // 特别针对酥米的小站的顶栏进行隐藏\n                      const customHeader = document.querySelector('.site-nav');\n                      if (customHeader) {\n                        customHeader.style.display = 'none';\n                        customHeader.style.visibility = 'hidden';\n                      }\n\n                      // 调整内容区域的边距，以防隐藏顶栏后内容位置不对\n                      const mainContent = document.querySelector('main, .main, #main, .content, #content');\n                      if (mainContent) {\n                        mainContent.style.marginTop = '0';\n                      }\n                    } catch (error) {\n                      console.error('隐藏顶栏失败:', error);\n                    }\n                  }\n                });\n              </script>\n            `\n          }}\n        />\n      </View>\n    );\n  }\n  \n  // 在原生平台上使用WebView\n  try {\n    const { WebView } = require('react-native-webview');\n    \n    // 注入的JavaScript代码来隐藏顶栏\n    const injectedJavaScript = `\n      (function() {\n        // 常见的顶栏元素选择器\n        const headerSelectors = [\n          'header', \n          '.header', \n          '#header',\n          '.navbar',\n          '#navbar',\n          '.top-bar',\n          '#top-bar',\n          '.site-header',\n          '#site-header',\n          '.site-nav'\n        ];\n\n        // 尝试隐藏所有可能的顶栏元素\n        headerSelectors.forEach(selector => {\n          const elements = document.querySelectorAll(selector);\n          elements.forEach(element => {\n            element.style.display = 'none';\n            element.style.visibility = 'hidden';\n          });\n        });\n\n        // 调整内容区域的边距\n        const mainContent = document.querySelector('main, .main, #main, .content, #content');\n        if (mainContent) {\n          mainContent.style.marginTop = '0';\n        }\n\n        return true;\n      })();\n    `;\n    \n    return (\n      <WebView\n        source={{ uri: url }}\n        style={styles.webview}\n        javaScriptEnabled={true}\n        domStorageEnabled={true}\n        startInLoadingState={true}\n        scalesPageToFit={true}\n        injectedJavaScript={injectedJavaScript}\n        injectedJavaScriptBeforeContentLoaded={injectedJavaScript}\n      />\n    );\n  } catch (error) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text style={styles.errorText}>无法加载WebView组件</Text>\n      </View>\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  webview: {\n    flex: 1,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5',\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#666',\n  },\n});\n\nexport default WebViewComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}