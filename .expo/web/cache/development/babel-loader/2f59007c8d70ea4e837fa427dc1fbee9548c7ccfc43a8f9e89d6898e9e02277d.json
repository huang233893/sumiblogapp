{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar WebViewComponent = function WebViewComponent(_ref) {\n  var url = _ref.url;\n  var iframeRef = useRef(null);\n  var _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n  var getCustomScriptForUrl = function getCustomScriptForUrl(currentUrl) {\n    var script = `\n      // 隐藏常见的顶栏元素\n      const hideCommonHeaders = () => {\n        const headerSelectors = [\n          'header', '.header', '#header',\n          '.navbar', '#navbar',\n          '.top-bar', '#top-bar',\n          '.site-header', '#site-header',\n          '.site-nav', '#site-nav',\n          '.header-top', '#header-top'\n        ];\n        \n        headerSelectors.forEach(selector => {\n          const elements = document.querySelectorAll(selector);\n          elements.forEach(element => {\n            element.style.display = 'none';\n            element.style.visibility = 'hidden';\n            element.style.height = '0';\n            element.style.overflow = 'hidden';\n          });\n        });\n        \n        // 调整内容区域\n        const mainContent = document.querySelector('main, .main, #main, .content, #content');\n        if (mainContent) {\n          mainContent.style.marginTop = '0 !important';\n          mainContent.style.paddingTop = '0 !important';\n        }\n      };\n      \n      hideCommonHeaders();\n    `;\n    if (currentUrl.includes('sumi233.top')) {\n      script += `\n        // 酥米的小站特定处理\n        // 隐藏顶部导航栏\n        const siteNav = document.querySelector('.site-nav');\n        if (siteNav) {\n          siteNav.style.display = 'none';\n          siteNav.style.visibility = 'hidden';\n          siteNav.style.height = '0';\n          siteNav.style.overflow = 'hidden';\n        }\n        \n        // 隐藏侧边栏（如果存在）\n        const sidebar = document.querySelector('.sidebar');\n        if (sidebar) {\n          sidebar.style.display = 'none';\n        }\n        \n        // 调整主容器宽度\n        const mainContainer = document.querySelector('.main-container, .container');\n        if (mainContainer) {\n          mainContainer.style.width = '100%';\n          mainContainer.style.margin = '0';\n          mainContainer.style.padding = '0';\n        }\n      `;\n    }\n    return script;\n  };\n  if (Platform.OS === 'web') {\n    var getIframeHTML = function getIframeHTML() {\n      var customScript = getCustomScriptForUrl(url);\n      return `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <style>\n              body, html { margin: 0; padding: 0; height: 100%; overflow: hidden; }\n              #content-iframe { \n                width: 100%; \n                height: 100%; \n                border: none; \n                position: absolute; \n                top: 0; \n                left: 0; \n              }\n            </style>\n          </head>\n          <body>\n            <iframe \n              id=\"content-iframe\"\n              src=\"${url}\"\n              onload=\"hideHeader()\"\n              sandbox=\"allow-scripts allow-same-origin\"\n            ></iframe>\n            <script>\n              function hideHeader() {\n                const iframe = document.getElementById('content-iframe');\n                try {\n                  // 尝试注入脚本\n                  const script = document.createElement('script');\n                  script.textContent = \\`${customScript}\\`;\n                  \n                  // 等待iframe完全加载\n                  setTimeout(() => {\n                    try {\n                      const doc = iframe.contentDocument || iframe.contentWindow.document;\n                      if (doc && doc.head) {\n                        doc.head.appendChild(script);\n                      }\n                    } catch (e) {\n                      console.log('跨域限制阻止了脚本注入');\n                      // 尝试第二种方法 - 通过滚动隐藏顶栏\n                      setTimeout(() => {\n                        try {\n                          iframe.contentWindow.scrollTo(0, 80); // 滚动以隐藏顶栏\n                        } catch (scrollErr) {\n                          console.log('无法滚动iframe内容');\n                        }\n                      }, 1000);\n                    }\n                  }, 500);\n                } catch (err) {\n                  console.error('隐藏顶栏失败:', err);\n                }\n              }\n            </script>\n          </body>\n        </html>\n      `;\n    };\n    var iframeSrc = `data:text/html;base64,${btoa(getIframeHTML())}`;\n    return _jsx(View, {\n      style: styles.webview,\n      children: _jsx(\"iframe\", {\n        ref: iframeRef,\n        src: iframeSrc,\n        style: {\n          width: '100%',\n          height: '100%',\n          border: 'none'\n        },\n        title: \"Web Content\",\n        sandbox: \"allow-scripts allow-same-origin\"\n      })\n    });\n  }\n  try {\n    var _require = require('react-native-webview'),\n      WebView = _require.WebView;\n    var injectedJavaScript = getCustomScriptForUrl(url);\n    return _jsx(WebView, {\n      source: {\n        uri: url\n      },\n      style: styles.webview,\n      javaScriptEnabled: true,\n      domStorageEnabled: true,\n      startInLoadingState: true,\n      scalesPageToFit: true,\n      injectedJavaScript: injectedJavaScript,\n      injectedJavaScriptBeforeContentLoaded: injectedJavaScript\n    });\n  } catch (error) {\n    return _jsx(View, {\n      style: styles.errorContainer,\n      children: _jsx(Text, {\n        style: styles.errorText,\n        children: \"\\u65E0\\u6CD5\\u52A0\\u8F7DWebView\\u7EC4\\u4EF6\"\n      })\n    });\n  }\n};\nvar styles = StyleSheet.create({\n  webview: {\n    flex: 1\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#666'\n  }\n});\nexport default WebViewComponent;","map":{"version":3,"names":["React","useRef","useEffect","StyleSheet","Platform","View","Text","Dimensions","jsx","_jsx","WebViewComponent","_ref","url","iframeRef","_Dimensions$get","get","width","height","getCustomScriptForUrl","currentUrl","script","includes","OS","getIframeHTML","customScript","iframeSrc","btoa","style","styles","webview","children","ref","src","border","title","sandbox","_require","require","WebView","injectedJavaScript","source","uri","javaScriptEnabled","domStorageEnabled","startInLoadingState","scalesPageToFit","injectedJavaScriptBeforeContentLoaded","error","errorContainer","errorText","create","flex","justifyContent","alignItems","backgroundColor","fontSize","color"],"sources":["D:/sumiblogapph5/src/components/WebViewComponent.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { StyleSheet, Platform, View, Text, Dimensions } from 'react-native';\n\nconst WebViewComponent = ({ url }) => {\n  const iframeRef = useRef(null);\n  const { width, height } = Dimensions.get('window');\n\n  // 根据URL获取特定的隐藏顶栏脚本\n  const getCustomScriptForUrl = (currentUrl) => {\n    // 基础脚本 - 隐藏常见顶栏元素\n    let script = `\n      // 隐藏常见的顶栏元素\n      const hideCommonHeaders = () => {\n        const headerSelectors = [\n          'header', '.header', '#header',\n          '.navbar', '#navbar',\n          '.top-bar', '#top-bar',\n          '.site-header', '#site-header',\n          '.site-nav', '#site-nav',\n          '.header-top', '#header-top'\n        ];\n        \n        headerSelectors.forEach(selector => {\n          const elements = document.querySelectorAll(selector);\n          elements.forEach(element => {\n            element.style.display = 'none';\n            element.style.visibility = 'hidden';\n            element.style.height = '0';\n            element.style.overflow = 'hidden';\n          });\n        });\n        \n        // 调整内容区域\n        const mainContent = document.querySelector('main, .main, #main, .content, #content');\n        if (mainContent) {\n          mainContent.style.marginTop = '0 !important';\n          mainContent.style.paddingTop = '0 !important';\n        }\n      };\n      \n      hideCommonHeaders();\n    `;\n\n    // 针对酥米的小站的特定脚本\n    if (currentUrl.includes('sumi233.top')) {\n      script += `\n        // 酥米的小站特定处理\n        // 隐藏顶部导航栏\n        const siteNav = document.querySelector('.site-nav');\n        if (siteNav) {\n          siteNav.style.display = 'none';\n          siteNav.style.visibility = 'hidden';\n          siteNav.style.height = '0';\n          siteNav.style.overflow = 'hidden';\n        }\n        \n        // 隐藏侧边栏（如果存在）\n        const sidebar = document.querySelector('.sidebar');\n        if (sidebar) {\n          sidebar.style.display = 'none';\n        }\n        \n        // 调整主容器宽度\n        const mainContainer = document.querySelector('.main-container, .container');\n        if (mainContainer) {\n          mainContainer.style.width = '100%';\n          mainContainer.style.margin = '0';\n          mainContainer.style.padding = '0';\n        }\n      `;\n    }\n\n    return script;\n  };\n\n  // 在Web平台上使用iframe\n  if (Platform.OS === 'web') {\n    // 创建一个特殊的HTML字符串，包含iframe和注入脚本\n    const getIframeHTML = () => {\n      const customScript = getCustomScriptForUrl(url);\n      return `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <style>\n              body, html { margin: 0; padding: 0; height: 100%; overflow: hidden; }\n              #content-iframe { \n                width: 100%; \n                height: 100%; \n                border: none; \n                position: absolute; \n                top: 0; \n                left: 0; \n              }\n            </style>\n          </head>\n          <body>\n            <iframe \n              id=\"content-iframe\"\n              src=\"${url}\"\n              onload=\"hideHeader()\"\n              sandbox=\"allow-scripts allow-same-origin\"\n            ></iframe>\n            <script>\n              function hideHeader() {\n                const iframe = document.getElementById('content-iframe');\n                try {\n                  // 尝试注入脚本\n                  const script = document.createElement('script');\n                  script.textContent = \\`${customScript}\\`;\n                  \n                  // 等待iframe完全加载\n                  setTimeout(() => {\n                    try {\n                      const doc = iframe.contentDocument || iframe.contentWindow.document;\n                      if (doc && doc.head) {\n                        doc.head.appendChild(script);\n                      }\n                    } catch (e) {\n                      console.log('跨域限制阻止了脚本注入');\n                      // 尝试第二种方法 - 通过滚动隐藏顶栏\n                      setTimeout(() => {\n                        try {\n                          iframe.contentWindow.scrollTo(0, 80); // 滚动以隐藏顶栏\n                        } catch (scrollErr) {\n                          console.log('无法滚动iframe内容');\n                        }\n                      }, 1000);\n                    }\n                  }, 500);\n                } catch (err) {\n                  console.error('隐藏顶栏失败:', err);\n                }\n              }\n            </script>\n          </body>\n        </html>\n      `;\n    };\n\n    // 使用data URI来加载iframe内容\n    const iframeSrc = `data:text/html;base64,${btoa(getIframeHTML())}`;\n\n    return (\n      <View style={styles.webview}>\n        <iframe \n          ref={iframeRef}\n          src={iframeSrc} \n          style={{ width: '100%', height: '100%', border: 'none' }}\n          title=\"Web Content\"\n          sandbox=\"allow-scripts allow-same-origin\"\n        />\n      </View>\n    );\n  }\n  \n  // 在原生平台上使用WebView\n  try {\n    const { WebView } = require('react-native-webview');\n    \n    // 注入的JavaScript代码来隐藏顶栏\n    const injectedJavaScript = getCustomScriptForUrl(url);\n    \n    return (\n      <WebView\n        source={{ uri: url }}\n        style={styles.webview}\n        javaScriptEnabled={true}\n        domStorageEnabled={true}\n        startInLoadingState={true}\n        scalesPageToFit={true}\n        injectedJavaScript={injectedJavaScript}\n        injectedJavaScriptBeforeContentLoaded={injectedJavaScript}\n      />\n    );\n  } catch (error) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text style={styles.errorText}>无法加载WebView组件</Text>\n      </View>\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  webview: {\n    flex: 1,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5',\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#666',\n  },\n});\n\nexport default WebViewComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}