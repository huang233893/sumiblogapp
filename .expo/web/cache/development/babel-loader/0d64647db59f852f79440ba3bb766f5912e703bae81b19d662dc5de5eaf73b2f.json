{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar WebViewComponent = function WebViewComponent(_ref) {\n  var url = _ref.url;\n  var iframeRef = useRef(null);\n  if (Platform.OS === 'web') {\n    useEffect(function () {\n      if (iframeRef.current) {\n        var iframe = iframeRef.current;\n        iframe.style.width = '100%';\n        iframe.style.height = '100%';\n        iframe.style.border = 'none';\n        iframe.style.position = 'relative';\n        var wrapper = document.createElement('div');\n        wrapper.style.position = 'relative';\n        wrapper.style.width = '100%';\n        wrapper.style.height = '100%';\n        wrapper.style.overflow = 'hidden';\n        var handleLoad = function handleLoad() {\n          try {\n            setTimeout(function () {\n              try {\n                if (iframe.contentWindow) {\n                  iframe.contentWindow.scrollTo(0, 60);\n                }\n              } catch (scrollError) {\n                console.log('无法滚动iframe内容，可能存在跨域限制');\n                iframe.style.marginTop = '-60px';\n                iframe.style.height = 'calc(100% + 60px)';\n              }\n            }, 500);\n          } catch (error) {\n            console.error('处理iframe加载失败:', error);\n          }\n        };\n        iframe.onload = handleLoad;\n        return function () {\n          iframe.onload = null;\n        };\n      }\n    }, [url]);\n    return _jsx(View, {\n      style: styles.webview,\n      children: _jsx(\"iframe\", {\n        ref: iframeRef,\n        src: url,\n        style: {\n          width: '100%',\n          height: '100%',\n          border: 'none',\n          position: 'relative'\n        },\n        title: \"Web Content\"\n      })\n    });\n  }\n  try {\n    var _require = require('react-native-webview'),\n      WebView = _require.WebView;\n    var injectedJavaScript = `\n      // 隐藏酥米的小站特定顶栏元素\n      const hideSumiBlogHeader = () => {\n        // 隐藏顶栏\n        const siteNav = document.querySelector('.site-nav');\n        if (siteNav) {\n          siteNav.style.display = 'none';\n          siteNav.style.visibility = 'hidden';\n        }\n        \n        // 隐藏其他可能的顶栏元素\n        const headers = document.querySelectorAll('header, .header, #header, .navbar, .top-bar');\n        headers.forEach(element => {\n          element.style.display = 'none';\n          element.style.visibility = 'hidden';\n        });\n        \n        // 调整内容区域\n        const mainContent = document.querySelector('.main');\n        if (mainContent) {\n          mainContent.style.marginTop = '0 !important';\n          mainContent.style.width = '100%';\n        }\n      };\n      \n      hideSumiBlogHeader();\n      \n      // 如果是归档页面，添加额外处理\n      if (window.location.pathname.includes('archives')) {\n        const mainTitle = document.querySelector('.post-title');\n        if (mainTitle) {\n          mainTitle.style.marginTop = '0';\n        }\n      }\n      \n      true;\n    `;\n    return _jsx(WebView, {\n      source: {\n        uri: url\n      },\n      style: styles.webview,\n      javaScriptEnabled: true,\n      domStorageEnabled: true,\n      startInLoadingState: true,\n      scalesPageToFit: true,\n      injectedJavaScript: injectedJavaScript,\n      injectedJavaScriptBeforeContentLoaded: injectedJavaScript\n    });\n  } catch (error) {\n    return _jsx(View, {\n      style: styles.errorContainer,\n      children: _jsx(Text, {\n        style: styles.errorText,\n        children: \"\\u65E0\\u6CD5\\u52A0\\u8F7DWebView\\u7EC4\\u4EF6\"\n      })\n    });\n  }\n};\nvar styles = StyleSheet.create({\n  webview: {\n    flex: 1\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5'\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#666'\n  }\n});\nexport default WebViewComponent;","map":{"version":3,"names":["React","useRef","useEffect","StyleSheet","Platform","View","Text","jsx","_jsx","WebViewComponent","_ref","url","iframeRef","OS","current","iframe","style","width","height","border","position","wrapper","document","createElement","overflow","handleLoad","setTimeout","contentWindow","scrollTo","scrollError","console","log","marginTop","error","onload","styles","webview","children","ref","src","title","_require","require","WebView","injectedJavaScript","source","uri","javaScriptEnabled","domStorageEnabled","startInLoadingState","scalesPageToFit","injectedJavaScriptBeforeContentLoaded","errorContainer","errorText","create","flex","justifyContent","alignItems","backgroundColor","fontSize","color"],"sources":["D:/sumiblogapph5/src/components/WebViewComponent.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { StyleSheet, Platform, View, Text } from 'react-native';\n\nconst WebViewComponent = ({ url }) => {\n  const iframeRef = useRef(null);\n\n  // 在Web平台上使用iframe\n  if (Platform.OS === 'web') {\n    useEffect(() => {\n      if (iframeRef.current) {\n        // 设置iframe样式，尝试使用CSS裁剪隐藏顶栏\n        const iframe = iframeRef.current;\n        \n        // 尝试通过CSS来隐藏顶栏\n        iframe.style.width = '100%';\n        iframe.style.height = '100%';\n        iframe.style.border = 'none';\n        iframe.style.position = 'relative';\n        \n        // 创建一个父容器来裁剪内容\n        const wrapper = document.createElement('div');\n        wrapper.style.position = 'relative';\n        wrapper.style.width = '100%';\n        wrapper.style.height = '100%';\n        wrapper.style.overflow = 'hidden';\n        \n        // 当iframe加载完成后尝试滚动隐藏顶栏\n        const handleLoad = () => {\n          try {\n            // 尝试滚动iframe内容以隐藏顶栏\n            setTimeout(() => {\n              try {\n                if (iframe.contentWindow) {\n                  iframe.contentWindow.scrollTo(0, 60); // 滚动以隐藏顶栏\n                }\n              } catch (scrollError) {\n                console.log('无法滚动iframe内容，可能存在跨域限制');\n                \n                // 如果无法滚动，尝试添加负边距\n                iframe.style.marginTop = '-60px';\n                iframe.style.height = 'calc(100% + 60px)';\n              }\n            }, 500);\n          } catch (error) {\n            console.error('处理iframe加载失败:', error);\n          }\n        };\n\n        iframe.onload = handleLoad;\n\n        return () => {\n          iframe.onload = null;\n        };\n      }\n    }, [url]);\n\n    return (\n      <View style={styles.webview}>\n        <iframe \n          ref={iframeRef}\n          src={url} \n          style={{ \n            width: '100%', \n            height: '100%', \n            border: 'none',\n            position: 'relative'\n          }}\n          title=\"Web Content\"\n        />\n      </View>\n    );\n  }\n  \n  // 在原生平台上使用WebView\n  try {\n    const { WebView } = require('react-native-webview');\n    \n    // 注入的JavaScript代码来隐藏顶栏\n    const injectedJavaScript = `\n      // 隐藏酥米的小站特定顶栏元素\n      const hideSumiBlogHeader = () => {\n        // 隐藏顶栏\n        const siteNav = document.querySelector('.site-nav');\n        if (siteNav) {\n          siteNav.style.display = 'none';\n          siteNav.style.visibility = 'hidden';\n        }\n        \n        // 隐藏其他可能的顶栏元素\n        const headers = document.querySelectorAll('header, .header, #header, .navbar, .top-bar');\n        headers.forEach(element => {\n          element.style.display = 'none';\n          element.style.visibility = 'hidden';\n        });\n        \n        // 调整内容区域\n        const mainContent = document.querySelector('.main');\n        if (mainContent) {\n          mainContent.style.marginTop = '0 !important';\n          mainContent.style.width = '100%';\n        }\n      };\n      \n      hideSumiBlogHeader();\n      \n      // 如果是归档页面，添加额外处理\n      if (window.location.pathname.includes('archives')) {\n        const mainTitle = document.querySelector('.post-title');\n        if (mainTitle) {\n          mainTitle.style.marginTop = '0';\n        }\n      }\n      \n      true;\n    `;\n    \n    return (\n      <WebView\n        source={{ uri: url }}\n        style={styles.webview}\n        javaScriptEnabled={true}\n        domStorageEnabled={true}\n        startInLoadingState={true}\n        scalesPageToFit={true}\n        injectedJavaScript={injectedJavaScript}\n        injectedJavaScriptBeforeContentLoaded={injectedJavaScript}\n      />\n    );\n  } catch (error) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text style={styles.errorText}>无法加载WebView组件</Text>\n      </View>\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  webview: {\n    flex: 1,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f5f5f5',\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#666',\n  },\n});\n\nexport default WebViewComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}