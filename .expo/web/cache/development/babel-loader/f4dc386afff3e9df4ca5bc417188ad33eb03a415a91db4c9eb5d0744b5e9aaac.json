{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar ThemeContext = createContext();\nvar lightTheme = {\n  colors: {\n    primary: '#FF9500',\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#333333',\n    textSecondary: '#666666',\n    textLight: '#999999',\n    error: '#FF3B30',\n    tabBarActive: '#FF9500',\n    tabBarInactive: '#8E8E93'\n  }\n};\nvar darkTheme = {\n  colors: {\n    primary: '#FF9500',\n    background: '#121212',\n    surface: '#1E1E1E',\n    text: '#FFFFFF',\n    textSecondary: '#CCCCCC',\n    textLight: '#999999',\n    error: '#FF453A',\n    tabBarActive: '#FF9500',\n    tabBarInactive: '#6E6E73'\n  }\n};\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  var children = _ref.children;\n  var systemColorScheme = useColorScheme();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isDarkMode = _useState2[0],\n    setIsDarkMode = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    followSystem = _useState4[0],\n    setFollowSystem = _useState4[1];\n  useEffect(function () {\n    if (followSystem) {\n      setIsDarkMode(systemColorScheme === 'dark');\n    }\n  }, [followSystem, systemColorScheme]);\n  var currentTheme = isDarkMode ? darkTheme : lightTheme;\n  var toggleTheme = function toggleTheme() {\n    setIsDarkMode(!isDarkMode);\n  };\n  var toggleFollowSystem = function toggleFollowSystem() {\n    setFollowSystem(!followSystem);\n    if (!followSystem) {\n      setIsDarkMode(isDarkMode);\n    } else {\n      setIsDarkMode(systemColorScheme === 'dark');\n    }\n  };\n  var value = {\n    theme: currentTheme,\n    isDarkMode: isDarkMode,\n    followSystem: followSystem,\n    toggleTheme: toggleTheme,\n    toggleFollowSystem: toggleFollowSystem\n  };\n  return _jsx(ThemeContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nexport var useTheme = function useTheme() {\n  var context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useColorScheme","jsx","_jsx","ThemeContext","lightTheme","colors","primary","background","surface","text","textSecondary","textLight","error","tabBarActive","tabBarInactive","darkTheme","ThemeProvider","_ref","children","systemColorScheme","_useState","_useState2","_slicedToArray","isDarkMode","setIsDarkMode","_useState3","_useState4","followSystem","setFollowSystem","currentTheme","toggleTheme","toggleFollowSystem","value","theme","Provider","useTheme","context","Error"],"sources":["D:/sumiblogapph5/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useColorScheme } from 'react-native';\n\n// 创建主题上下文\nconst ThemeContext = createContext();\n\n// 亮色主题\nconst lightTheme = {\n  colors: {\n    primary: '#FF9500', // 橙色强调色\n    background: '#F5F5F5',\n    surface: '#FFFFFF',\n    text: '#333333',\n    textSecondary: '#666666',\n    textLight: '#999999',\n    error: '#FF3B30',\n    tabBarActive: '#FF9500',\n    tabBarInactive: '#8E8E93',\n  },\n};\n\n// 暗色主题\nconst darkTheme = {\n  colors: {\n    primary: '#FF9500', // 保持橙色强调色\n    background: '#121212',\n    surface: '#1E1E1E',\n    text: '#FFFFFF',\n    textSecondary: '#CCCCCC',\n    textLight: '#999999',\n    error: '#FF453A',\n    tabBarActive: '#FF9500',\n    tabBarInactive: '#6E6E73',\n  },\n};\n\n// 主题提供者组件\nexport const ThemeProvider = ({ children }) => {\n  const systemColorScheme = useColorScheme();\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [followSystem, setFollowSystem] = useState(true);\n  \n  // 当跟随系统或系统主题变化时更新主题\n  useEffect(() => {\n    if (followSystem) {\n      setIsDarkMode(systemColorScheme === 'dark');\n    }\n  }, [followSystem, systemColorScheme]);\n  \n  // 当前使用的主题\n  const currentTheme = isDarkMode ? darkTheme : lightTheme;\n  \n  // 切换暗色/亮色模式\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  \n  // 切换是否跟随系统主题\n  const toggleFollowSystem = () => {\n    setFollowSystem(!followSystem);\n    // 如果现在不跟随系统，使用当前isDarkMode设置\n    if (!followSystem) {\n      setIsDarkMode(isDarkMode);\n    } else {\n      // 如果现在跟随系统，立即更新为系统主题\n      setIsDarkMode(systemColorScheme === 'dark');\n    }\n  };\n  \n  const value = {\n    theme: currentTheme,\n    isDarkMode,\n    followSystem,\n    toggleTheme,\n    toggleFollowSystem,\n  };\n  \n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\n// 使用主题的自定义Hook\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAAC,OAAAC,cAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAI9E,IAAMC,YAAY,GAAGP,aAAa,CAAC,CAAC;AAGpC,IAAMQ,UAAU,GAAG;EACjBC,MAAM,EAAE;IACNC,OAAO,EAAE,SAAS;IAClBC,UAAU,EAAE,SAAS;IACrBC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE,SAAS;IACfC,aAAa,EAAE,SAAS;IACxBC,SAAS,EAAE,SAAS;IACpBC,KAAK,EAAE,SAAS;IAChBC,YAAY,EAAE,SAAS;IACvBC,cAAc,EAAE;EAClB;AACF,CAAC;AAGD,IAAMC,SAAS,GAAG;EAChBV,MAAM,EAAE;IACNC,OAAO,EAAE,SAAS;IAClBC,UAAU,EAAE,SAAS;IACrBC,OAAO,EAAE,SAAS;IAClBC,IAAI,EAAE,SAAS;IACfC,aAAa,EAAE,SAAS;IACxBC,SAAS,EAAE,SAAS;IACpBC,KAAK,EAAE,SAAS;IAChBC,YAAY,EAAE,SAAS;IACvBC,cAAc,EAAE;EAClB;AACF,CAAC;AAGD,OAAO,IAAME,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACtC,IAAMC,iBAAiB,GAAGnB,cAAc,CAAC,CAAC;EAC1C,IAAAoB,SAAA,GAAoCvB,QAAQ,CAAC,KAAK,CAAC;IAAAwB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAAI,UAAA,GAAwC5B,QAAQ,CAAC,IAAI,CAAC;IAAA6B,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA/CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EAGpC5B,SAAS,CAAC,YAAM;IACd,IAAI6B,YAAY,EAAE;MAChBH,aAAa,CAACL,iBAAiB,KAAK,MAAM,CAAC;IAC7C;EACF,CAAC,EAAE,CAACQ,YAAY,EAAER,iBAAiB,CAAC,CAAC;EAGrC,IAAMU,YAAY,GAAGN,UAAU,GAAGR,SAAS,GAAGX,UAAU;EAGxD,IAAM0B,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxBN,aAAa,CAAC,CAACD,UAAU,CAAC;EAC5B,CAAC;EAGD,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/BH,eAAe,CAAC,CAACD,YAAY,CAAC;IAE9B,IAAI,CAACA,YAAY,EAAE;MACjBH,aAAa,CAACD,UAAU,CAAC;IAC3B,CAAC,MAAM;MAELC,aAAa,CAACL,iBAAiB,KAAK,MAAM,CAAC;IAC7C;EACF,CAAC;EAED,IAAMa,KAAK,GAAG;IACZC,KAAK,EAAEJ,YAAY;IACnBN,UAAU,EAAVA,UAAU;IACVI,YAAY,EAAZA,YAAY;IACZG,WAAW,EAAXA,WAAW;IACXC,kBAAkB,EAAlBA;EACF,CAAC;EAED,OACE7B,IAAA,CAACC,YAAY,CAAC+B,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAd,QAAA,EACjCA;EAAQ,CACY,CAAC;AAE5B,CAAC;AAGD,OAAO,IAAMiB,QAAQ,GAAG,SAAXA,QAAQA,CAAA,EAAS;EAC5B,IAAMC,OAAO,GAAGrC,UAAU,CAACI,YAAY,CAAC;EACxC,IAAI,CAACiC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}